[{"path":"https://byronsyun.github.io/vizOmics/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Byron Sun Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://byronsyun.github.io/vizOmics/LICENSE.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"MIT License","text":"functions package adapted PhiSpace package: - Original PhiSpace package: https://github.com/JiadongM/PhiSpace - PhiSpace developed Jiadong Mao licensed MIT License","code":""},{"path":"https://byronsyun.github.io/vizOmics/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jiadong Mao. Author, maintainer. Yinuo Sun. Author.","code":""},{"path":"https://byronsyun.github.io/vizOmics/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mao J, Sun Y (2025). vizOmics: Visualization Tools Multi-Omics Data Analysis. R package version 0.1.0, https://github.com/ByronSyun/vizOmics.","code":"@Manual{,   title = {vizOmics: Visualization Tools for Multi-Omics Data Analysis},   author = {Jiadong Mao and Yinuo Sun},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/ByronSyun/vizOmics}, }"},{"path":"https://byronsyun.github.io/vizOmics/index.html","id":"vizomics","dir":"","previous_headings":"","what":"vizOmics - Visualization Tools for Multi-Omics Data","title":"vizOmics - Visualization Tools for Multi-Omics Data","text":"vizOmics R package providing visualization utility functions multi-omics data analysis. includes tools clustering alignment, score matrix visualization, Sankey diagrams comparing classification results.","code":""},{"path":"https://byronsyun.github.io/vizOmics/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"vizOmics - Visualization Tools for Multi-Omics Data","text":"alignClusters(): Align clustering results using optimal assignment (Hungarian algorithm) matrixPlot(): Create comprehensive visualizations score matrices intelligent color detection multiple palettes plotSankey(): Generate interactive Sankey diagrams 2 3 classification comparisons","code":""},{"path":"https://byronsyun.github.io/vizOmics/index.html","id":"id_-whats-new-in-vizomics","dir":"","previous_headings":"Features","what":"üÜï What‚Äôs New in vizOmics","title":"vizOmics - Visualization Tools for Multi-Omics Data","text":"Enhanced matrixPlot() Smart Coloring: - ‚úÖ Intelligent color type detection: Automatically distinguishes discrete (factors, clusters) continuous (expression) variables - ‚úÖ Ordinal label parsing: Recognizes patterns like ‚Äú1 2‚Äù converts 1.5 proper ordering - ‚úÖ Reproducible colors: Fixed color mapping ensures consistency across runs - ‚úÖ Gradient direction control: reverse_gradient parameter mapping high values warm colors - ‚úÖ Multiple palettes: 5 continuous (MATLAB, viridis, plasma, inferno, magma) 5 discrete (Set1, Set2, Set3, Dark2, Paired) options - ‚úÖ Full control: Manual override color types custom color specifications","code":""},{"path":"https://byronsyun.github.io/vizOmics/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"vizOmics - Visualization Tools for Multi-Omics Data","text":"can install development version vizOmics GitHub:","code":"# install.packages(\"devtools\") devtools::install_github(\"ByronSyun/vizOmics\")"},{"path":[]},{"path":"https://byronsyun.github.io/vizOmics/index.html","id":"align-clustering-results","dir":"","previous_headings":"Quick Start","what":"Align Clustering Results","title":"vizOmics - Visualization Tools for Multi-Omics Data","text":"","code":"library(vizOmics)  # Create example clustering results clust_ref <- factor(c(rep(\"A\", 50), rep(\"B\", 50), rep(\"C\", 50))) clust_query <- factor(c(rep(\"1\", 50), rep(\"2\", 50), rep(\"3\", 50)))  # Align query to reference clust_aligned <- alignClusters(clust_query, clust_ref)  # Check alignment table(clust_aligned, clust_ref)"},{"path":"https://byronsyun.github.io/vizOmics/index.html","id":"visualize-score-matrix","dir":"","previous_headings":"Quick Start","what":"Visualize Score Matrix","title":"vizOmics - Visualization Tools for Multi-Omics Data","text":"","code":"# Create example score matrix (e.g., PCA results) scores <- data.frame(   comp1 = rnorm(100),   comp2 = rnorm(100),   comp3 = rnorm(100) )  # Basic matrix plot matrixPlot(scores, max_ncomp = 3)  # Color by discrete groups (auto-detected) groups <- factor(rep(c(\"A\", \"B\", \"C\"), length.out = 100)) matrixPlot(scores, max_ncomp = 3, colBy = groups, legendTitle = \"Group\")  # Color by continuous variable (auto-detected) expression <- rnorm(100) matrixPlot(scores, max_ncomp = 3, colBy = expression,             color_palette = \"viridis\", legendTitle = \"Expression\")  # Integer clusters (auto-detected as discrete) clusters <- rep(1:3, length.out = 100) matrixPlot(scores, max_ncomp = 3, colBy = clusters, legendTitle = \"Cluster\")  # Ordinal scale with reversed gradient (e.g., WHO Ordinal Scale: 7 = most severe) wos <- factor(c(\"1\", \"1 or 2\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"))[sample(1:8, 100, TRUE)] matrixPlot(scores, max_ncomp = 3, colBy = wos, legendTitle = \"WOS\",             reverse_gradient = TRUE)  # 7 = red (severe), 1 = blue (mild)"},{"path":"https://byronsyun.github.io/vizOmics/index.html","id":"create-sankey-diagram","dir":"","previous_headings":"Quick Start","what":"Create Sankey Diagram","title":"vizOmics - Visualization Tools for Multi-Omics Data","text":"","code":"# Two classifications class1 <- sample(c(\"A\", \"B\", \"C\"), 100, replace = TRUE) class2 <- sample(c(\"X\", \"Y\", \"Z\"), 100, replace = TRUE) plotSankey(class1, class2)  # Three classifications class3 <- sample(c(\"P\", \"Q\", \"R\"), 100, replace = TRUE) plotSankey(class1, class2, class3, fontsize = 14)"},{"path":[]},{"path":"https://byronsyun.github.io/vizOmics/index.html","id":"alignclusters","dir":"","previous_headings":"Functions Overview","what":"alignClusters()","title":"vizOmics - Visualization Tools for Multi-Omics Data","text":"Aligns query clustering results reference clustering using Hungarian algorithm. Useful : - Comparing clustering results different methods - Matching cluster labels across different parameter settings - Evaluating clustering stability","code":""},{"path":"https://byronsyun.github.io/vizOmics/index.html","id":"matrixplot","dir":"","previous_headings":"Functions Overview","what":"matrixPlot()","title":"vizOmics - Visualization Tools for Multi-Omics Data","text":"Creates comprehensive visualizations score matrices: - 1 component: Density plot jittered points - 2 components: Scatter plot - 3+ components: Matrix density plots (diagonal) scatter plots (-diagonal) Enhanced Features (v0.1.0): - Intelligent color type detection: Automatically detects discrete (factors, integer clusters) vs continuous (numeric expression) variables - Ordinal label parsing: Recognizes ‚Äú1 2‚Äù patterns converts numeric (1.5) proper ordering - Reproducible colors: Fixed color mapping sorted factor levels ensures consistency - Gradient direction control: reverse_gradient = TRUE map high values ‚Üí red, low values ‚Üí blue - Multiple color palettes: - Continuous: matlab (default), viridis, plasma, inferno, magma - Discrete: Set1, Set2, Set3, Dark2, Paired - Manual control: Override auto-detection colBy_type parameter - Customizable: Point sizes, transparency, custom colors, legend titles","code":""},{"path":"https://byronsyun.github.io/vizOmics/index.html","id":"plotsankey","dir":"","previous_headings":"Functions Overview","what":"plotSankey()","title":"vizOmics - Visualization Tools for Multi-Omics Data","text":"Generates interactive Sankey diagrams: - 2 classifications: Direct flow visualization - 3 classifications: Sequential flow three levels - Interactive HTML widget (powered networkD3) - Customizable font sizes node labels","code":""},{"path":"https://byronsyun.github.io/vizOmics/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"vizOmics - Visualization Tools for Multi-Omics Data","text":"vizOmics requires following R packages: - ggplot2 - cowplot - gridExtra - networkD3 - dplyr - tidyr - clue - magrittr - rlang - viridisLite (color palettes) - grDevices (color generation) - utils","code":""},{"path":"https://byronsyun.github.io/vizOmics/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"vizOmics - Visualization Tools for Multi-Omics Data","text":"functions package adapted PhiSpace package Jiadong Mao. thank original authors excellent work.","code":""},{"path":"https://byronsyun.github.io/vizOmics/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"vizOmics - Visualization Tools for Multi-Omics Data","text":"MIT License - see LICENSE.md details.","code":""},{"path":"https://byronsyun.github.io/vizOmics/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"vizOmics - Visualization Tools for Multi-Omics Data","text":"use vizOmics research, please cite:","code":"Mao, J., & Sun, Y. (2025). vizOmics: Visualization Tools for Multi-Omics Data Analysis. R package version 0.1.0. https://github.com/ByronSyun/vizOmics"},{"path":"https://byronsyun.github.io/vizOmics/index.html","id":"issues-and-contributions","dir":"","previous_headings":"","what":"Issues and Contributions","title":"vizOmics - Visualization Tools for Multi-Omics Data","text":"Please report issues : https://github.com/ByronSyun/vizOmics/issues Contributions welcome! Please feel free submit pull requests.","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/alignClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Align Clustering Results ‚Äî alignClusters","title":"Align Clustering Results ‚Äî alignClusters","text":"Given reference clustering result, align query clustering result match reference labels using optimal assignment (Hungarian algorithm).","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/alignClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align Clustering Results ‚Äî alignClusters","text":"","code":"alignClusters(clust, clust_ref)"},{"path":"https://byronsyun.github.io/vizOmics/reference/alignClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align Clustering Results ‚Äî alignClusters","text":"clust Query clustering result, can numerical, character factor vector. clust_ref Reference clustering result align .","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/alignClusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align Clustering Results ‚Äî alignClusters","text":"Re-aligned clustering result, represented factor vector levels matching reference clustering.","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/alignClusters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Align Clustering Results ‚Äî alignClusters","text":"function uses Hungarian algorithm (via clue::solve_LSAP) find optimal alignment query reference cluster labels. useful comparing clustering results different methods parameters, cluster labels may arbitrary.","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/alignClusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align Clustering Results ‚Äî alignClusters","text":"","code":"if (FALSE) { # \\dontrun{ # Create example clustering results clust_ref <- factor(c(rep(\"A\", 50), rep(\"B\", 50), rep(\"C\", 50))) clust_query <- factor(c(rep(\"1\", 50), rep(\"2\", 50), rep(\"3\", 50)))  # Align query to reference clust_aligned <- alignClusters(clust_query, clust_ref)  # Check alignment table(clust_aligned, clust_ref) } # }"},{"path":"https://byronsyun.github.io/vizOmics/reference/coerce_ordinal_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce Ordinal Labels to Numeric (e.g. ","title":"Coerce Ordinal Labels to Numeric (e.g. ","text":"Attempts convert factor/character ordinal labels numeric values. Recognises patterns like \"b\" uses average.","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/coerce_ordinal_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce Ordinal Labels to Numeric (e.g. ","text":"","code":"coerce_ordinal_numeric(x)"},{"path":"https://byronsyun.github.io/vizOmics/reference/coerce_ordinal_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce Ordinal Labels to Numeric (e.g. ","text":"x Character factor vector","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/coerce_ordinal_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce Ordinal Labels to Numeric (e.g. ","text":"List fields: numeric (numeric vector) success (logical)","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/get_color_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Continuous Color Palette ‚Äî get_color_palette","title":"Get Continuous Color Palette ‚Äî get_color_palette","text":"Internal function get color palettes continuous variables.","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/get_color_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Continuous Color Palette ‚Äî get_color_palette","text":"","code":"get_color_palette(palette_name = \"matlab\", reverse = FALSE)"},{"path":"https://byronsyun.github.io/vizOmics/reference/get_color_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Continuous Color Palette ‚Äî get_color_palette","text":"palette_name Character. Name palette. reverse Logical. TRUE, reverse color order.","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/get_color_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Continuous Color Palette ‚Äî get_color_palette","text":"Character vector colors.","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/get_discrete_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Discrete Color Palette ‚Äî get_discrete_colors","title":"Get Discrete Color Palette ‚Äî get_discrete_colors","text":"Get Discrete Color Palette","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/get_discrete_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Discrete Color Palette ‚Äî get_discrete_colors","text":"","code":"get_discrete_colors(level_names, palette_name = \"matlab\", reverse = FALSE)"},{"path":"https://byronsyun.github.io/vizOmics/reference/get_discrete_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Discrete Color Palette ‚Äî get_discrete_colors","text":"level_names Character vector level names palette_name Name palette reverse Logical. TRUE, reverse color order","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/get_discrete_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Discrete Color Palette ‚Äî get_discrete_colors","text":"Named vector colors","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/is_discrete_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect if Variable Should Use Discrete Coloring ‚Äî is_discrete_variable","title":"Detect if Variable Should Use Discrete Coloring ‚Äî is_discrete_variable","text":"Detect Variable Use Discrete Coloring","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/is_discrete_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect if Variable Should Use Discrete Coloring ‚Äî is_discrete_variable","text":"","code":"is_discrete_variable(x)"},{"path":"https://byronsyun.github.io/vizOmics/reference/is_discrete_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect if Variable Should Use Discrete Coloring ‚Äî is_discrete_variable","text":"x Vector check","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/is_discrete_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect if Variable Should Use Discrete Coloring ‚Äî is_discrete_variable","text":"Logical indicating whether use discrete colors","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/matrixPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Score Matrix Plot ‚Äî matrixPlot","title":"Score Matrix Plot ‚Äî matrixPlot","text":"Create density pairwise scatter plots visualizing score matrices, PCA scores, DIVAS components, dimensionality reduction results.","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/matrixPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score Matrix Plot ‚Äî matrixPlot","text":"","code":"matrixPlot(   scores,   max_ncomp = NULL,   comp_idx = NULL,   colBy = NULL,   colBy_type = c(\"auto\", \"discrete\"),   pointAlpha = NULL,   pointSize = 1,   manualCol = NULL,   manualAlpha = NULL,   fsize = 14,   returnPlotList = FALSE,   legendTitle = \"\",   compName = \"comp\",   color_palette = \"matlab\",   sort_levels = TRUE,   treat_ordinal_as_continuous = FALSE,   reverse_gradient = FALSE )"},{"path":"https://byronsyun.github.io/vizOmics/reference/matrixPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score Matrix Plot ‚Äî matrixPlot","text":"scores Matrix data frame scores plotted. column names matching pattern specified compName. max_ncomp Default NULL. Number first components plot. specified, override comp_idx. comp_idx Default NULL. Indices specific components plot. colBy Numeric, character, factor vector specify color points. length number rows scores. colBy_type Character. Type coloring: \"auto\" (default), \"discrete\". previous option \"continuous\" deprecated treated \"auto\". pointAlpha Numeric. Alpha transparency value points (0-1). pointSize Numeric. Size points. Default 1. manualCol Character vector. Manual specification colors discrete colBy values. manualAlpha Numeric vector. Manual specification alpha values. fsize Numeric. Base font size plots. Default 14. returnPlotList Logical. Whether return individual plots list. Default FALSE. legendTitle Character. Title legend. Default empty string. compName Character. Prefix component column names. Default \"comp\", 1st column named \"comp1\", etc. color_palette Character. continuous coloring: \"matlab\" (default), \"viridis\", \"plasma\", \"inferno\", \"magma\". discrete coloring: \"Set1\", \"Set2\", \"Set3\", \"Dark2\", \"Paired\", \"custom\". sort_levels Logical. discrete coloring, whether sort factor levels ensure consistent color mapping across runs. Default TRUE. treat_ordinal_as_continuous Logical. TRUE, attempt coerce character/factor ordinal labels (e.g. \"1\", \"1 2\", \"7\") numeric values use continuous gradients automatically coercion succeeds. Default FALSE. reverse_gradient Logical. TRUE, reverses color gradient direction. example, variable higher values = severe (like WOS: 7 severe), set TRUE map high values red. Default FALSE (low = blue, high = red matlab palette).","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/matrixPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score Matrix Plot ‚Äî matrixPlot","text":"combined plot (ggplot/grid object) showing: Diagonal: Density plots jittered points -diagonal: Pairwise scatter plots returnPlotList = TRUE, returns list combined plot individual plot components.","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/matrixPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Score Matrix Plot ‚Äî matrixPlot","text":"function creates different visualizations depending number components: 1 component: Single density plot jittered points 2 components: Scatter plot 3+ components: Matrix density plots (diagonal) scatter plots (-diagonal)","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/matrixPlot.html","id":"color-type-detection-when-colby-type-auto-","dir":"Reference","previous_headings":"","what":"Color Type Detection (when colBy_type = \"auto\")","title":"Score Matrix Plot ‚Äî matrixPlot","text":"function intelligently determines whether use discrete continuous colors: Factor character: Always discrete, unless treat_ordinal_as_continuous = TRUE labels can reliably coerced numeric (e.g. \"1 2\" -> 1.5) Numeric <20 unique values <50\\ Numeric otherwise: Continuous","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/matrixPlot.html","id":"color-consistency","dir":"Reference","previous_headings":"","what":"Color Consistency","title":"Score Matrix Plot ‚Äî matrixPlot","text":"discrete variables, colors mapped consistently sorting factor levels, ensuring colors appear groups across different runs. Set sort_levels = FALSE use original factor level order.","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/matrixPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score Matrix Plot ‚Äî matrixPlot","text":"","code":"if (FALSE) { # \\dontrun{ # Create example score matrix scores <- data.frame(   comp1 = rnorm(100),   comp2 = rnorm(100),   comp3 = rnorm(100) )  # Basic plot matrixPlot(scores, max_ncomp = 3)  # Ordinal labels treated as discrete by default (7 fixed colours) wos <- factor(c(\"1\",\"1 or 2\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"))[sample(1:8, 100, TRUE)] matrixPlot(scores, max_ncomp = 3, colBy = wos, legendTitle = \"WOS\")  # For WOS where 7 is most severe, reverse gradient to map 7->red, 1->blue matrixPlot(scores, max_ncomp = 3, colBy = wos, legendTitle = \"WOS\",            reverse_gradient = TRUE) } # }"},{"path":"https://byronsyun.github.io/vizOmics/reference/plotSankey.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Sankey Diagram for Classification Results ‚Äî plotSankey","title":"Plot Sankey Diagram for Classification Results ‚Äî plotSankey","text":"Create interactive Sankey diagram visualize flow 2 3 classification results. Useful comparing clustering classification outcomes across different methods timepoints.","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/plotSankey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Sankey Diagram for Classification Results ‚Äî plotSankey","text":"","code":"plotSankey(..., add_suffix = TRUE, fontsize = 12, class_names = NULL)"},{"path":"https://byronsyun.github.io/vizOmics/reference/plotSankey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Sankey Diagram for Classification Results ‚Äî plotSankey","text":"... Two three classification vectors. vector class labels (character, factor, numeric). add_suffix Logical. TRUE (default), adds suffixes distinguish classification levels plotting 3 classifications. used 3 classifications provided. fontsize Numeric. Font size node labels. Default 12. class_names Character vector. Optional names classification levels. NULL, uses \"Class1\", \"Class2\", etc.","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/plotSankey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Sankey Diagram for Classification Results ‚Äî plotSankey","text":"interactive Sankey diagram (networkD3 htmlwidget object).","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/plotSankey.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Sankey Diagram for Classification Results ‚Äî plotSankey","text":"function automatically detects whether 2 3 classification vectors provided creates appropriate Sankey diagram: 2 classifications: Shows direct flow first second 3 classifications: Shows flow first -> second -> third add_suffix = TRUE 3 classifications, suffixes (\"-\", \"_\", \"\") added class labels ensure uniqueness across levels.","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/plotSankey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Sankey Diagram for Classification Results ‚Äî plotSankey","text":"","code":"if (FALSE) { # \\dontrun{ # Two classifications class1 <- sample(c(\"A\", \"B\", \"C\"), 100, replace = TRUE) class2 <- sample(c(\"X\", \"Y\", \"Z\"), 100, replace = TRUE) plotSankey(class1, class2)  # Three classifications class3 <- sample(c(\"P\", \"Q\", \"R\"), 100, replace = TRUE) plotSankey(class1, class2, class3, fontsize = 14)  # With custom names plotSankey(class1, class2, class3,             class_names = c(\"Method1\", \"Method2\", \"Method3\")) } # }"},{"path":"https://byronsyun.github.io/vizOmics/reference/prepare_discrete_coloring.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Discrete Coloring Variable ‚Äî prepare_discrete_coloring","title":"Prepare Discrete Coloring Variable ‚Äî prepare_discrete_coloring","text":"Prepare Discrete Coloring Variable","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/prepare_discrete_coloring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Discrete Coloring Variable ‚Äî prepare_discrete_coloring","text":"","code":"prepare_discrete_coloring(x, sort_levels = TRUE, reverse = FALSE)"},{"path":"https://byronsyun.github.io/vizOmics/reference/prepare_discrete_coloring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Discrete Coloring Variable ‚Äî prepare_discrete_coloring","text":"x Vector prepare sort_levels Whether sort factor levels reverse Whether reverse color gradient","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/prepare_discrete_coloring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Discrete Coloring Variable ‚Äî prepare_discrete_coloring","text":"List prepared factor color mapping","code":""},{"path":"https://byronsyun.github.io/vizOmics/reference/vizOmics-package.html","id":null,"dir":"Reference","previous_headings":"","what":"vizOmics: Visualization Tools for Multi-Omics Data Analysis ‚Äî vizOmics-package","title":"vizOmics: Visualization Tools for Multi-Omics Data Analysis ‚Äî vizOmics-package","text":"collection visualization utility functions multi-omics data analysis. Includes tools clustering alignment, score matrix visualization intelligent color detection, interactive Sankey diagrams comparing classification results. Functions extracted enhanced PhiSpace package.","code":""},{"path":[]},{"path":"https://byronsyun.github.io/vizOmics/reference/vizOmics-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vizOmics: Visualization Tools for Multi-Omics Data Analysis ‚Äî vizOmics-package","text":"Maintainer: Jiadong Mao chiatungmao@gmail.com (ORCID) Authors: Yinuo Sun byronsunyinuoo@gmail.com","code":""}]
